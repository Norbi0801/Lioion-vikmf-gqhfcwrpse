source("Main.R")
#######################################
#source("LoadData.R")
#source("Packages.R")
library(data.table)
library(dplyr)
library(tidyr)
library(stringi)
#######################################
#TODO: Projekt
#TODO: Zaimportowanie danych
Posts_xml <- read.csv("arqade.stackexchange/Posts.xml.csv")
zapytanie_1 <- function(Posts_xml){
postsDT_arqade <- data.table(Posts_xml)
postsDT_arqade_1 <- setDT(postsDT_arqade)[, CreationDate := format(as.Date(CreationDate), "%Y-%m") ]
postsDT_arqade_1 <- postsDT_arqade_1[PostTypeId == 1]
postsDT_arqade_1$Tags <- substr(postsDT_arqade_1$Tags,
2,
nchar(postsDT_arqade_1$Tags) - 1)
s <- strsplit(postsDT_arqade_1$Tags, split = "><")
s1 <- data.frame(Id = rep(postsDT_arqade_1$Id, sapply(s, length)), Tags = unlist(s))
s1 <- data.table(s1)
typeof(s1)
postsDT_arqade_1 <- postsDT_arqade_1[ ,Tags := NULL]
postsDT_arqade_2 <- merge(postsDT_arqade_1, s1, by = "Id")
ans <- postsDT_arqade_2[,
.(Tags_number = .N),
by = c("CreationDate", "Tags")][order(CreationDate, decreasing = TRUE)][CreationDate>="2012-02"]
ans1 <- split(ans, by=c("CreationDate"))
ans2 <- lapply(ans1, function(x){
sort <- x[order(Tags_number, decreasing = TRUE)]
sort[1:5]
})
y <- do.call(rbind, ans2)
y <- split(y, by = c("Tags"))
#ans1 <- ans[,
#            .(best_tag = max(Tags_number)),
#            by = c("CreationDate")]
#TODO Czy skupiamy si? na wyselekcjonowaniu miesi?cy
}
x <- zapytanie_1(Posts_xml)
plot(seq(1,length(x$CreationDate)), x$Tags_number, xlabel = x$CreationDate)
# 25 userów z największą ilością użytych tagów.
tags_users_comparision <- function(Posts_xml, Users_xml){
PostsDT1 <- data.table(Posts_xml)
PostsDT <- PostsDT1[, .(Id,
PostTypeId,
CreationDate,
OwnerUserId,
Tags)]
PostsDT <- PostsDT[PostTypeId == 1, ]
PostsDT$Tags <- substr(PostsDT$Tags,
2,
nchar(PostsDT$Tags) - 1)
split <- strsplit(PostsDT$Tags, split = "><")
split1 <- data.frame(Id = rep(PostsDT$Id, sapply(split, length)), Tags = unlist(split))
PostsDT <- PostsDT[, Tags := NULL]
PostsDT <- merge(PostsDT, split1, by = "Id")
UsersDT1 <- data.table(Users_xml)
UsersDT <- UsersDT1[, .(Id,
DisplayName,
Location,
Difference = (UpVotes - DownVotes))]
UsersDT <- UsersDT[Id != -1, ]
DT <- merge(PostsDT, UsersDT, by.x = "OwnerUserId", by.y = "Id")
DT1 <- count(DT, OwnerUserId, wt = n_distinct(Tags), name = "Number_of_Tags")
ans <- merge(UsersDT, DT1, by.x = "Id", by.y = "OwnerUserId")
ans <- ans[, Id := NULL]
ans <- ans[Difference >= 1000, ]
ans <- ans[order(Number_of_Tags, decreasing = TRUE)]
ans <- ans[1:25, ]
return(ans)
}
### QUEENS GAMBIT ###
PostsDT <- data.table(Posts_xml)
Questions <- PostsDT[PostTypeId == 1, ]
Questions_before <- Questions["2020-06-01" <= CreationDate & CreationDate <= "2020-10-31", ]
Questions_after <- Questions[CreationDate >= "2020-11-01", ]
Answers <- PostsDT[PostTypeId == 2, ]
Answers_before <- Answers["2020-06-01" <= CreationDate & CreationDate <= "2020-10-31", ]
Answers_after <- Answers[CreationDate >= "2020-11-01", ]
numbers <- function(DT){
DT <- setDT(DT)[, CreationDate := format(as.Date(CreationDate), "%Y-%m") ]
DT <- DT[, .(Number = .N),
by = "CreationDate"]
return(DT)
}
Questions_before <- numbers(Questions_before)
Questions_after <- numbers(Questions_after)
Answers_before <- numbers(Answers_before)
Answers_after <- numbers(Answers_after)
###################
Posts_xml <- read.csv("arqade.stackexchange\\Posts.xml.csv")
x <- data.table(Posts_xml)
trends <- function(x){
x[, .(Date = substr(CreationDate,1,7), Points = ifelse(PostTypeId == 1, ViewCount+Score*16, Score*16))][, .(Points = sum(Points)), by = Date][order(Date, decreasing = TRUE)][1:12]
}
install.package('rmarkdown')
install.package(rmarkdown)
knitr::opts_chunk$set(echo = TRUE, cache = TRUE, warning = FALSE, message = FALSE)
ggplot(wynik, aes(x=Data, y=Q, colour=Color, group=1)) +
geom_line(show.legend = FALSE)+
geom_point(show.legend = FALSE)+
labs(x = "",  y = "Liczba pytań", color = "Nazwy tagów") +
theme(text = element_text(size = 20)) +
scale_fill_brewer(palette = "Blues")
source("Main.R")
wynik <- queens_gambit1(chess.Posts)
ggplot(wynik, aes(x=Data, y=Q, colour=Color, group=1)) +
geom_line(show.legend = FALSE)+
geom_point(show.legend = FALSE)+
labs(x = "",  y = "Liczba pytań", color = "Nazwy tagów") +
theme(text = element_text(size = 20)) +
scale_fill_brewer(palette = "Blues")
ggplot(wynik, aes(x=Data, y=c(Q, A), colour=Color, group=1)) +
geom_line(show.legend = FALSE)+
geom_point(show.legend = FALSE)+
labs(x = "",  y = "Liczba pytań", color = "Nazwy tagów") +
theme(text = element_text(size = 20)) +
scale_fill_brewer(palette = "Blues")
y=c(Q, A)
queens_gambit1 <- function(PostsDT){
Questions <- PostsDT[PostTypeId == 1, ]
Questions_q <- Questions["2020-07-01" <= CreationDate & CreationDate <= "2021-03-01", ]
Answers <- PostsDT[PostTypeId == 2, ]
Answers_q <- Answers["2020-07-01" <= CreationDate & CreationDate <= "2021-03-01", ]
numbers <- function(DT){
DT[, CreationDate := format(as.Date(CreationDate), "%Y-%m")][, .(Number = .N), by = "CreationDate"]
}
Questions_q <- numbers(Questions_q)
colnames(Questions_q)[2] <- "Number of Questions"
Answers_q <- numbers(Answers_q)
colnames(Answers_q)[2] <- "Number of Answers"
ans <- merge(Questions_q, Answers_q, by = "CreationDate")
data.table(Data = ans[[1]],V = c(ans[[2]], ans[[3]]), Color = ifelse(ans[[1]]<"2020-11",1,2))
}
wynik <- queens_gambit1(chess.Posts)
View(wynik)
ggplot(wynik, aes(x=Data, y=V, colour=Color, group=1)) +
geom_line(show.legend = FALSE)+
geom_point(show.legend = FALSE)+
labs(x = "",  y = "Liczba pytań", color = "Nazwy tagów") +
theme(text = element_text(size = 20)) +
scale_fill_brewer(palette = "Blues")
queens_gambit1 <- function(PostsDT){
Questions <- PostsDT[PostTypeId == 1, ]
Questions_q <- Questions["2020-07-01" <= CreationDate & CreationDate <= "2021-03-01", ]
Answers <- PostsDT[PostTypeId == 2, ]
Answers_q <- Answers["2020-07-01" <= CreationDate & CreationDate <= "2021-03-01", ]
numbers <- function(DT){
DT[, CreationDate := format(as.Date(CreationDate), "%Y-%m")][, .(Number = .N), by = "CreationDate"]
}
Questions_q <- numbers(Questions_q)
colnames(Questions_q)[2] <- "Number of Questions"
Answers_q <- numbers(Answers_q)
colnames(Answers_q)[2] <- "Number of Answers"
ans <- merge(Questions_q, Answers_q, by = "CreationDate")
V <- c(ans[[2]], ans[[3]])
data.table(Data = ans[[1]],V = V, Color = ifelse(ans[[1]]<"2020-11",1,2), G = ifelse(V == ans[[2]],1,2))
}
wynik <- queens_gambit1(chess.Posts)
View(wynik)
ggplot(wynik, aes(x=Data, y=V, colour=Color, group=G)) +
geom_line(show.legend = FALSE)+
geom_point(show.legend = FALSE)+
labs(x = "",  y = "Liczba pytań", color = "Nazwy tagów") +
theme(text = element_text(size = 20)) +
scale_fill_brewer(palette = "Blues")
queens_gambit1 <- function(PostsDT){
Questions <- PostsDT[PostTypeId == 1, ]
Questions_q <- Questions["2020-07-01" <= CreationDate & CreationDate <= "2021-03-01", ]
Answers <- PostsDT[PostTypeId == 2, ]
Answers_q <- Answers["2020-07-01" <= CreationDate & CreationDate <= "2021-03-01", ]
numbers <- function(DT){
DT[, CreationDate := format(as.Date(CreationDate), "%Y-%m")][, .(Number = .N), by = "CreationDate"]
}
Questions_q <- numbers(Questions_q)
colnames(Questions_q)[2] <- "Number of Questions"
Answers_q <- numbers(Answers_q)
colnames(Answers_q)[2] <- "Number of Answers"
ans <- merge(Questions_q, Answers_q, by = "CreationDate")
V <- c(ans[[2]], ans[[3]])
data.table(Data = ans[[1]],V = V, Color = ifelse(ans[[1]]<"2020-10",1,2), G = ifelse(V == ans[[2]],1,2))
}
ggplot(wynik, aes(x=Data, y=V, colour=Color, group=G)) +
geom_line(show.legend = FALSE)+
geom_point(show.legend = FALSE)+
labs(x = "",  y = "Liczba pytań", color = "Nazwy tagów") +
theme(text = element_text(size = 20)) +
scale_fill_brewer(palette = "Blues")
wynik <- queens_gambit1(chess.Posts)
ggplot(wynik, aes(x=Data, y=V, colour=Color, group=G)) +
geom_line(show.legend = FALSE)+
geom_point(show.legend = FALSE)+
labs(x = "",  y = "Liczba pytań", color = "Nazwy tagów") +
theme(text = element_text(size = 20)) +
scale_fill_brewer(palette = "Blues")
ggplot(wynik, aes(x=Data, y=V, colour=Color, group=G)) +
geom_line(show.legend = FALSE)+
geom_point(show.legend = FALSE)+
labs(x = "",  y = "Liczba pytań/odpowiedzi", color = "Nazwy tagów") +
theme(text = element_text(size = 20)) +
scale_fill_brewer(palette = "Blues")
knitr::opts_chunk$set(echo = TRUE, cache = TRUE, warning = FALSE, message = FALSE)
ggplot(wynik, aes(x=Data, y=V, colour=Color, group=G)) +
geom_line(show.legend = FALSE)+
geom_point(show.legend = FALSE)+
labs(x = "",  y = "Liczba pytań/odpowiedzi", color = "Nazwy tagów") +
theme(text = element_text(size = 20)) +
scale_fill_brewer(palette = "Blues")
source("Main.R")
ggplot(wynik, aes(x=Data, y=V, colour=Color, group=G)) +
geom_line(show.legend = FALSE)+
geom_point(show.legend = FALSE)+
labs(x = "",  y = "Liczba pytań/odpowiedzi", color = "Nazwy tagów") +
theme(text = element_text(size = 20)) +
scale_fill_brewer(palette = "Blues")
ggplot(wynik, aes(x=Data, y=V, colour=Color, group=G)) +
geom_line(show.legend = FALSE)+
geom_point(show.legend = FALSE)+
labs(x = "",  y = "Liczba pytań/odpowiedzi", color = "Nazwy tagów") +
theme(text = element_text(size = 20))
ggplot(wynik, aes(x=wynik$Data, y=wynik$V, colour=wynik$Color, group=wynik$G)) +
geom_line(show.legend = FALSE)+
geom_point(show.legend = FALSE)+
labs(x = "",  y = "Liczba pytań/odpowiedzi", color = "Nazwy tagów") +
theme(text = element_text(size = 20))
wynik <- queens_gambit(chess.Posts)
ggplot(wynik, aes(x=wynik$Data, y=wynik$V, colour=wynik$Color, group=wynik$G))+
geom_line(show.legend = FALSE)+
geom_point(show.legend = FALSE)+
labs(x = "",  y = "Liczba pytań/odpowiedzi", color = "Nazwy tagów") +
theme(text = element_text(size = 20))
wynik <- queens_gambit(chess.Posts)
wynik <- queens_gambit1(chess.Posts)
ggplot(wynik, aes(x=Data, y=V, colour=Color, group=G))+
geom_line(show.legend = FALSE)+
geom_point(show.legend = FALSE)+
labs(x = "",  y = "Liczba pytań/odpowiedzi", color = "Nazwy tagów") +
theme(text = element_text(size = 20))
knitr::opts_chunk$set(echo = TRUE, cache = TRUE, warning = FALSE, message = FALSE)
sizeR <- 30
ggplot(wynik, aes(x=Data, y=V, colour=Color, group=G))+
geom_line(show.legend = FALSE, size = 4)+
geom_point(show.legend = FALSE, size = 4)+
labs(x = "",  y = "Liczba pytań / odpowiedzi", color = "Nazwy tagów") +
theme(text = element_text(size = sizeR))+
annotate(geom = "text", x = 4, y = 280, label = "Test")
?annotate
wynik <- queens_gambit1(chess.Posts)
ggplot(wynik, aes(x=Data, y=V, colour=Color, group=G))+
geom_line(show.legend = FALSE, size = 4)+
geom_point(show.legend = FALSE, size = 4)+
labs(x = "",  y = "Liczba pytań / odpowiedzi", color = "Nazwy tagów") +
theme(text = element_text(size = sizeR))+
annotate(geom = "text", x = 4, y = 280, label = "Odpowiedzi", size = 25)+
annotate(geom = "text", x = 4, y = 125, label = "Pytania", size = 25)
ggsave("queens_gambit.png", height = 9, width = 16)
wynik <- trends(chess.Posts)
View(wynik)
trends <- function(x, c){
ans <- x[, .(Date = substr(CreationDate,1,7), Points = ifelse(PostTypeId == 1, ViewCount/ifelse(Score==0,Score+1,Score), Score))][, .(Points = sum(Points)), by = Date][order(Date, decreasing = TRUE)][1:12]
data.table(Date = ans[,Date], Points = ans[,Points], Group = c)
}
wynik <- trends(chess.Posts,"chess")
View(wynik)
wynik <- do.call(rbind,list(trends(chess.Posts,"chess"), trends(arqade.Posts,"arqade"), trends(boarding.Posts,"boarding")))
View(wynik)
ggplot(wynik, aes(x=Date, y=Points, colour=Color, group=Group))+
geom_line(show.legend = FALSE, size = 4)+
geom_point(show.legend = FALSE, size = 4)+
labs(x = "",  y = "Liczba pytań / odpowiedzi", color = "Nazwy tagów") +
theme(text = element_text(size = sizeR))+
annotate(geom = "text", x = 4, y = 280, label = "Odpowiedzi", size = 12)+
annotate(geom = "text", x = 4, y = 125, label = "Pytania", size = 12)
ggplot(wynik, aes(x=Date, y=Points, colour=Group, group=Group))+
geom_line(show.legend = FALSE, size = 4)+
geom_point(show.legend = FALSE, size = 4)+
labs(x = "",  y = "Liczba pytań / odpowiedzi", color = "Nazwy tagów") +
theme(text = element_text(size = sizeR))+
annotate(geom = "text", x = 4, y = 280, label = "Odpowiedzi", size = 12)+
annotate(geom = "text", x = 4, y = 125, label = "Pytania", size = 12)
ggplot(wynik, aes(x=Date, y=Points, colour=Group, group=Group))+
geom_line(show.legend = FALSE, size = 4)+
geom_point(show.legend = FALSE, size = 4)+
labs(x = "",  y = "Liczba pytań / odpowiedzi", color = "Nazwy tagów") +
theme(text = element_text(size = 10))+
ggsave("queens_gambit.png", height = 9, width = 16)
ggplot(wynik, aes(x=Date, y=Points, colour=Group, group=Group))+
geom_line(show.legend = FALSE, size = 2)+
geom_point(show.legend = FALSE, size = 3)+
labs(x = "",  y = "Liczba pytań / odpowiedzi", color = "Nazwy tagów") +
theme(text = element_text(size = 10))+
ggsave("queens_gambit.png", height = 9, width = 16)
ggplot(wynik, aes(x=Date, y=Points, colour=Group, group=Group))+
geom_line(show.legend = FALSE, size = 2)+
geom_point(size = 3)+
labs(x = "",  y = "Liczba pytań / odpowiedzi", color = "Nazwy tagów") +
theme(text = element_text(size = 10))+
ggsave("queens_gambit.png", height = 9, width = 16)
ggplot(wynik, aes(x=Date, y=Points, colour=Group, group=Group))+
geom_line(size = 2)+
geom_point(size = 3)+
labs(x = "",  y = "Liczba pytań / odpowiedzi", color = "Fora") +
theme(text = element_text(size = 10))+
ggsave("queens_gambit.png", height = 9, width = 16)
library(XML)
readXML <- function(source){
doc <- xmlParse(source)
xL <- xmlToList(doc) ###is to convert xml doc into List
xL <- do.call(rbind, xL)
ret <- as.data.frame(xL)
rownames(ret) <- NULL
ret
}
Poker.Posts <- readXML("poker/Posts.xml")
trends(Poker.Posts,"Poker")
Poker.Posts <- data.table(Poker.Posts)
trends(Poker.Posts,"Poker")
load("~/GitHub/Lioion-vikmf-gqhfcwrpse/poker/Posts.xml.csv")
poker.Posts <- data.table(read.csv("poker/Posts.xml.csv"))
wynik <- do.call(rbind,list(trends(chess.Posts,"chess"), trends(arqade.Posts,"arqade"), trends(boarding.Posts,"boarding"), trends(poker.Posts,"poker")))
ggplot(wynik, aes(x=Date, y=Points, colour=Group, group=Group))+
geom_line(size = 2)+
geom_point(size = 3)+
labs(x = "",  y = "Liczba pytań / odpowiedzi", color = "Fora") +
theme(text = element_text(size = 10))
wynik <- do.call(rbind,list(trends(arqade.Posts,"arqade"), trends(boarding.Posts,"boarding"), trends(poker.Posts,"poker")))
ggplot(wynik, aes(x=Date, y=Points, colour=Group, group=Group))+
geom_line(size = 2)+
geom_point(size = 3)+
labs(x = "",  y = "Liczba pytań / odpowiedzi", color = "Fora") +
theme(text = element_text(size = 10))
wynik <- do.call(rbind,list(trends(chess.Posts,"chess"), trends(boarding.Posts,"boarding"), trends(poker.Posts,"poker")))
ggplot(wynik, aes(x=Date, y=Points, colour=Group, group=Group))+
geom_line(size = 2)+
geom_point(size = 3)+
labs(x = "",  y = "Liczba pytań / odpowiedzi", color = "Fora") +
theme(text = element_text(size = 10))
install.packages("distill")
install.packages("libyaml")
